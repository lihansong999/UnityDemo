/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package wsserver */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "wslogsetting.go"

#include <stdlib.h>
#include "wsserver.h"

#line 1 "cgo-generated-wrapper"

#line 3 "wsserver.go"

#include <stdlib.h>
#include "wsserver.h"


#line 1 "cgo-generated-wrapper"

#line 3 "wstools.go"

#include <stdlib.h>
#include "wsserver.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void WSSetLogCallback(void* f);
extern __declspec(dllexport) GoInt64 WSServerListenAndServe(wss_callback_t* ccallback, char* addr, char* pattern, char* subprotocol, char* certFilePath, char* keyFilePath, GoInt messageType, GoInt64 maxMessageSize, GoInt rsize, GoInt wsize, GoInt sendChannelSize, GoInt handshakeTimeout, GoInt writeWait, GoInt pongWait, GoInt pingPeriod);
extern __declspec(dllexport) void WSServerShutdown(GoInt64 sid);
extern __declspec(dllexport) GoUint8 WSServerSend(GoInt64 sid, GoInt64 cid, char* data, GoInt size);
extern __declspec(dllexport) void WSServerSendBatch(GoInt64 sid, long long int* cidArray, GoInt count, char* data, GoInt size);
extern __declspec(dllexport) void WSServerClose(GoInt64 sid, GoInt64 cid);
extern __declspec(dllexport) void WSServerCloseBatch(GoInt64 sid, long long int* cidArray, GoInt count);
extern __declspec(dllexport) wss_socket_info_t* WSServerGetSocketInfo(GoInt64 sid, GoInt64 cid);
extern __declspec(dllexport) void WSServerFreeSocketInfo(wss_socket_info_t* socketInfo);
extern __declspec(dllexport) GoInt WSServerGetConnectedCount(GoInt64 sid);
extern __declspec(dllexport) void GO_FREE(void* pointer);
extern __declspec(dllexport) GoInt GO_MAXPROCS(GoInt maxProcs);
extern __declspec(dllexport) GoInt64 GO_TIME();
extern __declspec(dllexport) void GO_GC();

#ifdef __cplusplus
}
#endif
